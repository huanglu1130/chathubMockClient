/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chatbothub.BotActionReply', null, global);
goog.exportSymbol('proto.chatbothub.BotActionRequest', null, global);
goog.exportSymbol('proto.chatbothub.BotFilterRequest', null, global);
goog.exportSymbol('proto.chatbothub.BotLoginReply', null, global);
goog.exportSymbol('proto.chatbothub.BotLoginRequest', null, global);
goog.exportSymbol('proto.chatbothub.BotLogoutRequest', null, global);
goog.exportSymbol('proto.chatbothub.BotsInfo', null, global);
goog.exportSymbol('proto.chatbothub.BotsReply', null, global);
goog.exportSymbol('proto.chatbothub.BotsRequest', null, global);
goog.exportSymbol('proto.chatbothub.BranchTag', null, global);
goog.exportSymbol('proto.chatbothub.EventReply', null, global);
goog.exportSymbol('proto.chatbothub.EventRequest', null, global);
goog.exportSymbol('proto.chatbothub.FilterCreateRequest', null, global);
goog.exportSymbol('proto.chatbothub.FilterFillReply', null, global);
goog.exportSymbol('proto.chatbothub.FilterFillRequest', null, global);
goog.exportSymbol('proto.chatbothub.FilterNextRequest', null, global);
goog.exportSymbol('proto.chatbothub.OperationReply', null, global);
goog.exportSymbol('proto.chatbothub.RouterBranchRequest', null, global);
goog.exportSymbol('proto.chatbothub.StreamingCtrlRequest', null, global);
goog.exportSymbol('proto.chatbothub.StreamingResource', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotFilterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotFilterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotFilterRequest.displayName = 'proto.chatbothub.BotFilterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotFilterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotFilterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotFilterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotFilterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filterid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotFilterRequest}
 */
proto.chatbothub.BotFilterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotFilterRequest;
  return proto.chatbothub.BotFilterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotFilterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotFilterRequest}
 */
proto.chatbothub.BotFilterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotFilterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotFilterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotFilterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotFilterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilterid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string botId = 1;
 * @return {string}
 */
proto.chatbothub.BotFilterRequest.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotFilterRequest.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filterId = 2;
 * @return {string}
 */
proto.chatbothub.BotFilterRequest.prototype.getFilterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BotFilterRequest.prototype.setFilterid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.FilterCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.FilterCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.FilterCreateRequest.displayName = 'proto.chatbothub.FilterCreateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.FilterCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.FilterCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.FilterCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filtertype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filtername: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.FilterCreateRequest}
 */
proto.chatbothub.FilterCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.FilterCreateRequest;
  return proto.chatbothub.FilterCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.FilterCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.FilterCreateRequest}
 */
proto.chatbothub.FilterCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiltertype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiltername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.FilterCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.FilterCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.FilterCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFiltertype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFiltername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string filterId = 1;
 * @return {string}
 */
proto.chatbothub.FilterCreateRequest.prototype.getFilterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.FilterCreateRequest.prototype.setFilterid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filterType = 2;
 * @return {string}
 */
proto.chatbothub.FilterCreateRequest.prototype.getFiltertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.FilterCreateRequest.prototype.setFiltertype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string filterName = 3;
 * @return {string}
 */
proto.chatbothub.FilterCreateRequest.prototype.getFiltername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.FilterCreateRequest.prototype.setFiltername = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.chatbothub.FilterCreateRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.FilterCreateRequest.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.FilterNextRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.FilterNextRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.FilterNextRequest.displayName = 'proto.chatbothub.FilterNextRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.FilterNextRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.FilterNextRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.FilterNextRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterNextRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nextfilterid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.FilterNextRequest}
 */
proto.chatbothub.FilterNextRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.FilterNextRequest;
  return proto.chatbothub.FilterNextRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.FilterNextRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.FilterNextRequest}
 */
proto.chatbothub.FilterNextRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNextfilterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.FilterNextRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.FilterNextRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.FilterNextRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterNextRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNextfilterid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string filterId = 1;
 * @return {string}
 */
proto.chatbothub.FilterNextRequest.prototype.getFilterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.FilterNextRequest.prototype.setFilterid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nextFilterId = 2;
 * @return {string}
 */
proto.chatbothub.FilterNextRequest.prototype.getNextfilterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.FilterNextRequest.prototype.setNextfilterid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BranchTag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BranchTag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BranchTag.displayName = 'proto.chatbothub.BranchTag';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BranchTag.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BranchTag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BranchTag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BranchTag.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BranchTag}
 */
proto.chatbothub.BranchTag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BranchTag;
  return proto.chatbothub.BranchTag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BranchTag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BranchTag}
 */
proto.chatbothub.BranchTag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BranchTag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BranchTag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BranchTag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BranchTag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Key = 1;
 * @return {string}
 */
proto.chatbothub.BranchTag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BranchTag.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Value = 2;
 * @return {string}
 */
proto.chatbothub.BranchTag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BranchTag.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.RouterBranchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.RouterBranchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.RouterBranchRequest.displayName = 'proto.chatbothub.RouterBranchRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.RouterBranchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.RouterBranchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.RouterBranchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.RouterBranchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tag: (f = msg.getTag()) && proto.chatbothub.BranchTag.toObject(includeInstance, f),
    routerid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filterid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.RouterBranchRequest}
 */
proto.chatbothub.RouterBranchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.RouterBranchRequest;
  return proto.chatbothub.RouterBranchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.RouterBranchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.RouterBranchRequest}
 */
proto.chatbothub.RouterBranchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatbothub.BranchTag;
      reader.readMessage(value,proto.chatbothub.BranchTag.deserializeBinaryFromReader);
      msg.setTag(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouterid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.RouterBranchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.RouterBranchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.RouterBranchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.RouterBranchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTag();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chatbothub.BranchTag.serializeBinaryToWriter
    );
  }
  f = message.getRouterid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilterid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional BranchTag tag = 1;
 * @return {?proto.chatbothub.BranchTag}
 */
proto.chatbothub.RouterBranchRequest.prototype.getTag = function() {
  return /** @type{?proto.chatbothub.BranchTag} */ (
    jspb.Message.getWrapperField(this, proto.chatbothub.BranchTag, 1));
};


/** @param {?proto.chatbothub.BranchTag|undefined} value */
proto.chatbothub.RouterBranchRequest.prototype.setTag = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.chatbothub.RouterBranchRequest.prototype.clearTag = function() {
  this.setTag(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatbothub.RouterBranchRequest.prototype.hasTag = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string routerId = 2;
 * @return {string}
 */
proto.chatbothub.RouterBranchRequest.prototype.getRouterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.RouterBranchRequest.prototype.setRouterid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string filterId = 3;
 * @return {string}
 */
proto.chatbothub.RouterBranchRequest.prototype.getFilterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.RouterBranchRequest.prototype.setFilterid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.EventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.EventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.EventRequest.displayName = 'proto.chatbothub.EventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.EventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.EventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.EventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.EventRequest}
 */
proto.chatbothub.EventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.EventRequest;
  return proto.chatbothub.EventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.EventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.EventRequest}
 */
proto.chatbothub.EventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.EventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.EventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.EventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string eventType = 1;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setEventtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientId = 3;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string clientType = 4;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setClienttype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.EventReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.EventReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.EventReply.displayName = 'proto.chatbothub.EventReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.EventReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.EventReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.EventReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    botclientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    botclienttype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    botid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.EventReply}
 */
proto.chatbothub.EventReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.EventReply;
  return proto.chatbothub.EventReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.EventReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.EventReply}
 */
proto.chatbothub.EventReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotclientid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotclienttype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.EventReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.EventReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.EventReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBotclientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBotclienttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string eventType = 1;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setEventtype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string botClientId = 3;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getBotclientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setBotclientid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string botClientType = 4;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getBotclienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setBotclienttype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string botId = 5;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string clientId = 6;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string clientType = 7;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setClienttype = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.BotsRequest.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.BotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsRequest.displayName = 'proto.chatbothub.BotsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.BotsRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginsList: jspb.Message.getRepeatedField(msg, 1),
    botidsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsRequest}
 */
proto.chatbothub.BotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsRequest;
  return proto.chatbothub.BotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsRequest}
 */
proto.chatbothub.BotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLogins(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBotids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getBotidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string logins = 1;
 * @return {!Array<string>}
 */
proto.chatbothub.BotsRequest.prototype.getLoginsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.chatbothub.BotsRequest.prototype.setLoginsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.chatbothub.BotsRequest.prototype.addLogins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.chatbothub.BotsRequest.prototype.clearLoginsList = function() {
  this.setLoginsList([]);
};


/**
 * repeated string botIds = 2;
 * @return {!Array<string>}
 */
proto.chatbothub.BotsRequest.prototype.getBotidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.chatbothub.BotsRequest.prototype.setBotidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.chatbothub.BotsRequest.prototype.addBotids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.chatbothub.BotsRequest.prototype.clearBotidsList = function() {
  this.setBotidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.BotsReply.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.BotsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsReply.displayName = 'proto.chatbothub.BotsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.BotsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    botsinfoList: jspb.Message.toObjectList(msg.getBotsinfoList(),
    proto.chatbothub.BotsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsReply}
 */
proto.chatbothub.BotsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsReply;
  return proto.chatbothub.BotsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsReply}
 */
proto.chatbothub.BotsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatbothub.BotsInfo;
      reader.readMessage(value,proto.chatbothub.BotsInfo.deserializeBinaryFromReader);
      msg.addBotsinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotsinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chatbothub.BotsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BotsInfo botsInfo = 1;
 * @return {!Array<!proto.chatbothub.BotsInfo>}
 */
proto.chatbothub.BotsReply.prototype.getBotsinfoList = function() {
  return /** @type{!Array<!proto.chatbothub.BotsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chatbothub.BotsInfo, 1));
};


/** @param {!Array<!proto.chatbothub.BotsInfo>} value */
proto.chatbothub.BotsReply.prototype.setBotsinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chatbothub.BotsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsReply.prototype.addBotsinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chatbothub.BotsInfo, opt_index);
};


proto.chatbothub.BotsReply.prototype.clearBotsinfoList = function() {
  this.setBotsinfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsInfo.displayName = 'proto.chatbothub.BotsInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastping: jspb.Message.getFieldWithDefault(msg, 5, 0),
    login: jspb.Message.getFieldWithDefault(msg, 6, ""),
    logininfo: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    filterinfo: jspb.Message.getFieldWithDefault(msg, 9, ""),
    momentfilterinfo: jspb.Message.getFieldWithDefault(msg, 10, ""),
    botid: jspb.Message.getFieldWithDefault(msg, 11, ""),
    scanurl: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsInfo;
  return proto.chatbothub.BotsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastping(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogininfo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterinfo(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMomentfilterinfo(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setScanurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastping();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLogininfo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getFilterinfo();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMomentfilterinfo();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getScanurl();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientType = 2;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setClienttype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 startAt = 4;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getStartat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setStartat = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 lastPing = 5;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getLastping = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setLastping = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string login = 6;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string loginInfo = 7;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getLogininfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setLogininfo = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 status = 8;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setStatus = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string filterInfo = 9;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getFilterinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setFilterinfo = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string momentFilterInfo = 10;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getMomentfilterinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setMomentfilterinfo = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string botId = 11;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string scanUrl = 12;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getScanurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setScanurl = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotLoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotLoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotLoginRequest.displayName = 'proto.chatbothub.BotLoginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotLoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotLoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotLoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    login: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    notifyurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logininfo: jspb.Message.getFieldWithDefault(msg, 6, ""),
    botid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotLoginRequest}
 */
proto.chatbothub.BotLoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotLoginRequest;
  return proto.chatbothub.BotLoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotLoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotLoginRequest}
 */
proto.chatbothub.BotLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotifyurl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogininfo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotLoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotLoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotLoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNotifyurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogininfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientType = 2;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setClienttype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string login = 3;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string notifyUrl = 5;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getNotifyurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setNotifyurl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string loginInfo = 6;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getLogininfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setLogininfo = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string botId = 7;
 * @return {string}
 */
proto.chatbothub.BotLoginRequest.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginRequest.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotLogoutRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotLogoutRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotLogoutRequest.displayName = 'proto.chatbothub.BotLogoutRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotLogoutRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotLogoutRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotLogoutRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLogoutRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotLogoutRequest}
 */
proto.chatbothub.BotLogoutRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotLogoutRequest;
  return proto.chatbothub.BotLogoutRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotLogoutRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotLogoutRequest}
 */
proto.chatbothub.BotLogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotLogoutRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotLogoutRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotLogoutRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLogoutRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string botId = 1;
 * @return {string}
 */
proto.chatbothub.BotLogoutRequest.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotLogoutRequest.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.OperationReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.OperationReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.OperationReply.displayName = 'proto.chatbothub.OperationReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.OperationReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.OperationReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.OperationReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.OperationReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.OperationReply}
 */
proto.chatbothub.OperationReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.OperationReply;
  return proto.chatbothub.OperationReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.OperationReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.OperationReply}
 */
proto.chatbothub.OperationReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.OperationReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.OperationReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.OperationReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.OperationReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 code = 1;
 * @return {number}
 */
proto.chatbothub.OperationReply.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.chatbothub.OperationReply.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.chatbothub.OperationReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.OperationReply.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotLoginReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotLoginReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotLoginReply.displayName = 'proto.chatbothub.BotLoginReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotLoginReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotLoginReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotLoginReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLoginReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienterror: (f = msg.getClienterror()) && proto.chatbothub.OperationReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotLoginReply}
 */
proto.chatbothub.BotLoginReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotLoginReply;
  return proto.chatbothub.BotLoginReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotLoginReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotLoginReply}
 */
proto.chatbothub.BotLoginReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 2:
      var value = new proto.chatbothub.OperationReply;
      reader.readMessage(value,proto.chatbothub.OperationReply.deserializeBinaryFromReader);
      msg.setClienterror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotLoginReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotLoginReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotLoginReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotLoginReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienterror();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chatbothub.OperationReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.chatbothub.BotLoginReply.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotLoginReply.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OperationReply clientError = 2;
 * @return {?proto.chatbothub.OperationReply}
 */
proto.chatbothub.BotLoginReply.prototype.getClienterror = function() {
  return /** @type{?proto.chatbothub.OperationReply} */ (
    jspb.Message.getWrapperField(this, proto.chatbothub.OperationReply, 2));
};


/** @param {?proto.chatbothub.OperationReply|undefined} value */
proto.chatbothub.BotLoginReply.prototype.setClienterror = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.chatbothub.BotLoginReply.prototype.clearClienterror = function() {
  this.setClienterror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatbothub.BotLoginReply.prototype.hasClienterror = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotActionRequest.displayName = 'proto.chatbothub.BotActionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionrequestid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    login: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actiontype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    actionbody: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotActionRequest}
 */
proto.chatbothub.BotActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotActionRequest;
  return proto.chatbothub.BotActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotActionRequest}
 */
proto.chatbothub.BotActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionrequestid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setActiontype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionbody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionrequestid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActiontype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getActionbody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string actionRequestId = 1;
 * @return {string}
 */
proto.chatbothub.BotActionRequest.prototype.getActionrequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionRequest.prototype.setActionrequestid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string login = 2;
 * @return {string}
 */
proto.chatbothub.BotActionRequest.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionRequest.prototype.setLogin = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string actionType = 3;
 * @return {string}
 */
proto.chatbothub.BotActionRequest.prototype.getActiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionRequest.prototype.setActiontype = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string actionBody = 4;
 * @return {string}
 */
proto.chatbothub.BotActionRequest.prototype.getActionbody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionRequest.prototype.setActionbody = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotActionReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotActionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotActionReply.displayName = 'proto.chatbothub.BotActionReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotActionReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotActionReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotActionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotActionReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionrequestid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    success: jspb.Message.getFieldWithDefault(msg, 2, false),
    msg: jspb.Message.getFieldWithDefault(msg, 3, ""),
    body: jspb.Message.getFieldWithDefault(msg, 4, ""),
    clienterror: (f = msg.getClienterror()) && proto.chatbothub.OperationReply.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotActionReply}
 */
proto.chatbothub.BotActionReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotActionReply;
  return proto.chatbothub.BotActionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotActionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotActionReply}
 */
proto.chatbothub.BotActionReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionrequestid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 5:
      var value = new proto.chatbothub.OperationReply;
      reader.readMessage(value,proto.chatbothub.OperationReply.deserializeBinaryFromReader);
      msg.setClienterror(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotActionReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotActionReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotActionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotActionReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionrequestid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getClienterror();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.chatbothub.OperationReply.serializeBinaryToWriter
    );
  }
};


/**
 * optional string actionRequestId = 1;
 * @return {string}
 */
proto.chatbothub.BotActionReply.prototype.getActionrequestid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionReply.prototype.setActionrequestid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool success = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.chatbothub.BotActionReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.chatbothub.BotActionReply.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string msg = 3;
 * @return {string}
 */
proto.chatbothub.BotActionReply.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionReply.prototype.setMsg = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string body = 4;
 * @return {string}
 */
proto.chatbothub.BotActionReply.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.BotActionReply.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional OperationReply clientError = 5;
 * @return {?proto.chatbothub.OperationReply}
 */
proto.chatbothub.BotActionReply.prototype.getClienterror = function() {
  return /** @type{?proto.chatbothub.OperationReply} */ (
    jspb.Message.getWrapperField(this, proto.chatbothub.OperationReply, 5));
};


/** @param {?proto.chatbothub.OperationReply|undefined} value */
proto.chatbothub.BotActionReply.prototype.setClienterror = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.chatbothub.BotActionReply.prototype.clearClienterror = function() {
  this.setClienterror(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chatbothub.BotActionReply.prototype.hasClienterror = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.FilterFillRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.FilterFillRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.FilterFillRequest.displayName = 'proto.chatbothub.FilterFillRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.FilterFillRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.FilterFillRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.FilterFillRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterFillRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    source: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.FilterFillRequest}
 */
proto.chatbothub.FilterFillRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.FilterFillRequest;
  return proto.chatbothub.FilterFillRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.FilterFillRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.FilterFillRequest}
 */
proto.chatbothub.FilterFillRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.FilterFillRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.FilterFillRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.FilterFillRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterFillRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string botId = 1;
 * @return {string}
 */
proto.chatbothub.FilterFillRequest.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.FilterFillRequest.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.chatbothub.FilterFillRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.FilterFillRequest.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string body = 3;
 * @return {string}
 */
proto.chatbothub.FilterFillRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.FilterFillRequest.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.FilterFillReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.FilterFillReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.FilterFillReply.displayName = 'proto.chatbothub.FilterFillReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.FilterFillReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.FilterFillReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.FilterFillReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterFillReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.FilterFillReply}
 */
proto.chatbothub.FilterFillReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.FilterFillReply;
  return proto.chatbothub.FilterFillReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.FilterFillReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.FilterFillReply}
 */
proto.chatbothub.FilterFillReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.FilterFillReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.FilterFillReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.FilterFillReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.FilterFillReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.chatbothub.FilterFillReply.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.chatbothub.FilterFillReply.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.StreamingCtrlRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.StreamingCtrlRequest.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.StreamingCtrlRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.StreamingCtrlRequest.displayName = 'proto.chatbothub.StreamingCtrlRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.StreamingCtrlRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.StreamingCtrlRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.StreamingCtrlRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.StreamingCtrlRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.chatbothub.StreamingResource.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.StreamingCtrlRequest}
 */
proto.chatbothub.StreamingCtrlRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.StreamingCtrlRequest;
  return proto.chatbothub.StreamingCtrlRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.StreamingCtrlRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.StreamingCtrlRequest}
 */
proto.chatbothub.StreamingCtrlRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 3:
      var value = new proto.chatbothub.StreamingResource;
      reader.readMessage(value,proto.chatbothub.StreamingResource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.StreamingCtrlRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.StreamingCtrlRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.StreamingCtrlRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.chatbothub.StreamingResource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.StreamingCtrlRequest.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientType = 2;
 * @return {string}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.StreamingCtrlRequest.prototype.setClienttype = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated StreamingResource resources = 3;
 * @return {!Array<!proto.chatbothub.StreamingResource>}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.chatbothub.StreamingResource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chatbothub.StreamingResource, 3));
};


/** @param {!Array<!proto.chatbothub.StreamingResource>} value */
proto.chatbothub.StreamingCtrlRequest.prototype.setResourcesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.chatbothub.StreamingResource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chatbothub.StreamingResource}
 */
proto.chatbothub.StreamingCtrlRequest.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.chatbothub.StreamingResource, opt_index);
};


proto.chatbothub.StreamingCtrlRequest.prototype.clearResourcesList = function() {
  this.setResourcesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.StreamingResource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.StreamingResource.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.StreamingResource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.StreamingResource.displayName = 'proto.chatbothub.StreamingResource';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.StreamingResource.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.StreamingResource.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.StreamingResource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.StreamingResource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.StreamingResource.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resourcetype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    actiontype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chatusersList: jspb.Message.getRepeatedField(msg, 4),
    chatgroupsList: jspb.Message.getRepeatedField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.StreamingResource}
 */
proto.chatbothub.StreamingResource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.StreamingResource;
  return proto.chatbothub.StreamingResource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.StreamingResource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.StreamingResource}
 */
proto.chatbothub.StreamingResource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResourcetype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiontype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addChatusers(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addChatgroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.StreamingResource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.StreamingResource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.StreamingResource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.StreamingResource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResourcetype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getActiontype();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getChatusersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getChatgroupsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional string botId = 1;
 * @return {string}
 */
proto.chatbothub.StreamingResource.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.StreamingResource.prototype.setBotid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 resourceType = 2;
 * @return {number}
 */
proto.chatbothub.StreamingResource.prototype.getResourcetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.chatbothub.StreamingResource.prototype.setResourcetype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 actionType = 3;
 * @return {number}
 */
proto.chatbothub.StreamingResource.prototype.getActiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.chatbothub.StreamingResource.prototype.setActiontype = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string chatusers = 4;
 * @return {!Array<string>}
 */
proto.chatbothub.StreamingResource.prototype.getChatusersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.chatbothub.StreamingResource.prototype.setChatusersList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.chatbothub.StreamingResource.prototype.addChatusers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.chatbothub.StreamingResource.prototype.clearChatusersList = function() {
  this.setChatusersList([]);
};


/**
 * repeated string chatgroups = 5;
 * @return {!Array<string>}
 */
proto.chatbothub.StreamingResource.prototype.getChatgroupsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array<string>} value */
proto.chatbothub.StreamingResource.prototype.setChatgroupsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.chatbothub.StreamingResource.prototype.addChatgroups = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.chatbothub.StreamingResource.prototype.clearChatgroupsList = function() {
  this.setChatgroupsList([]);
};


goog.object.extend(exports, proto.chatbothub);
